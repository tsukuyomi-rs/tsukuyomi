//! Components for the basic mechanisim for HTTP/1.1 server upgrade.
//!
//! # Examples
//!
//! ```
//! # extern crate tsukuyomi;
//! # extern crate futures;
//! # extern crate http;
//! # use tsukuyomi::input::Input;
//! # use tsukuyomi::error::Error;
//! # use tsukuyomi::upgrade::UpgradeContext;
//! # use tsukuyomi::output::{Output, ResponseBody};
//! # use futures::{future, Future};
//! # use http::{header, StatusCode, Response};
//! fn validate(input: &Input) -> Result<(), Error> {
//!     // do some stuff ...
//! #   Ok(())
//! }
//!
//! fn on_upgrade(cx: UpgradeContext)
//!     -> impl Future<Item = (), Error = ()> + Send + 'static {
//!     // ...
//! #   future::ok(())
//! }
//!
//! fn handshake(input: &mut Input) -> Result<Output, Error> {
//!     validate(input)?;
//!
//!     // Register a callback function called when upgrading
//!     // the server protocol.
//!     let _ = input.body_mut().on_upgrade(on_upgrade);
//!
//!     // Build the handshake response.
//!     // If the status code is set to `101 Switching Protocols`,
//!     // a task will be generated by calling a callback function
//!     // registered at the above section at the end of handling
//!     // the request.
//!     Response::builder()
//!         .status(StatusCode::SWITCHING_PROTOCOLS)
//!         .header(header::UPGRADE, "foo")
//!         .body(ResponseBody::empty())
//!         .map_err(Error::internal_server_error)
//! }
//! ```

use futures::{Future, IntoFuture};
use http::Request;
use hyper::upgrade::Upgraded;
use std::marker::PhantomData;
use std::rc::Rc;

use app::App;
use app::RouteId;
use app::ScopedKey;
use input::local_map::LocalMap;

/// Contextual information used when upgrading the server protocol.
#[derive(Debug)]
pub struct UpgradeContext {
    /// The underlying IO object used in the handshake.
    pub io: Upgraded,

    /// The value of `Request` used in the handshake.
    pub request: Request<()>,

    /// The value of `LocalMap` used in the handshake.
    pub locals: LocalMap,

    pub(crate) route: RouteId,
    pub(crate) params: Vec<(usize, usize)>,
    pub(crate) app: App,
    pub(crate) _marker: PhantomData<Rc<()>>,
}

impl UpgradeContext {
    /// Returns the reference to a value of `T` registered in the global storage.
    pub fn get<T>(&self, key: &'static ScopedKey<T>) -> Option<&T>
    where
        T: Send + Sync + 'static,
    {
        self.app.get(key, self.route)
    }
}

/// A trait representing a function called at performing the protocol upgrade.
pub trait OnUpgrade: Send + 'static {
    /// Creates a task for processing the upgraded protocol from the specified context.
    fn on_upgrade(self, cx: UpgradeContext) -> Box<dyn Future<Item = (), Error = ()> + Send + 'static>;
}

impl<F, R> OnUpgrade for F
where
    F: FnOnce(UpgradeContext) -> R + Send + 'static,
    R: IntoFuture<Item = (), Error = ()>,
    R::Future: Send + 'static,
{
    fn on_upgrade(self, cx: UpgradeContext) -> Box<dyn Future<Item = (), Error = ()> + Send + 'static> {
        Box::new((self)(cx).into_future())
    }
}
