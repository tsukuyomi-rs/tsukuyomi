resources:
  containers:
    - container: tarpaulin
      image: xd009642/tarpaulin:latest-nightly
      options: --security-opt seccomp=unconfined

jobs:
  - job: Windows
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - script: |
        curl -sSf -o rustup-init.exe https://win.rustup.rs
        rustup-init.exe -y --default-toolchain stable
        set PATH=%PATH%;%USERPROFILE%\.cargo\bin
        echo '##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin'
      displayName: 'install rustup'

    - script: |
        rustup --version
        rustc --version
        cargo --version
      displayName: 'show toolchain version'

    - script: bash .ci/run_test.sh
      displayName: 'run test script'

  - job: macOS
    pool:
      vmImage: 'macOS-10.13'
    steps:
    - script: |
        curl -sSf https://sh.rustup.rs | sh -s -- --default-toolchain stable -y
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
      displayName: 'install rustup'
    - script: |
        rustup --version
        rustc --version
        cargo --version
      displayName: 'show toolchain version'
    - script: bash .ci/run_test.sh
      displayName: 'run test script'

  - job: Linux
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
      CARGO_TERM_VERBOSE: true
    strategy:
      matrix:
        stable:
          rust_toolchain: stable
        beta:
          rust_toolchain: beta
        nightly:
          rust_toolchain: nightly
        minimum_supported:
          rust_toolchain: 1.30.0
    steps:
    - script: |
        curl -sSf https://sh.rustup.rs | sh -s -- --default-toolchain $RUST_TOOLCHAIN -y
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
      displayName: 'install rustup'

    - script: |
        rustup --version
        rustc --version
        cargo --version
      displayName: 'show toolchain version'

    - script: |
        rustup component add rustfmt-preview clippy-preview
      displayName: 'install supplemental components'
      condition: eq(variables['rust_toolchain'], 'stable')

    - script: bash .ci/run_test.sh
      displayName: 'run test'
      condition: ne(variables['rust_toolchain'], 'nightly')

    - script: bash .ci/run_test.sh || true
      displayName: 'run test (allow failure)'
      condition: eq(variables['rust_toolchain'], 'nightly')

    - script: |
        rm -rf target/doc
        bash .ci/build_doc.sh
        bash .ci/deploy_doc.sh
      displayName: 'deploy API doc'
      condition: eq(variables['rust_toolchain'], 'stable')
      env:
        GH_TOKEN: $(myGitHubToken)

  - job: linux_tarpaulin
    displayName: Linux (cargo tarpaulin)
    pool:
      vmImage: 'ubuntu-16.04'
    container: tarpaulin
    steps:
    - script: |
        set -ex
        curl -s https://codecov.io/bash -o report_coverage.sh
        cargo tarpaulin -v --skip-clean --out Xml --all && bash report_coverage.sh
        cargo tarpaulin -v --skip-clean --out Xml -p tsukuyomi-core --all-features && bash report_coverage.sh
        cargo tarpaulin -v --skip-clean --out Xml -p tsukuyomi-server --all-features && bash report_coverage.sh
        cargo tarpaulin -v --skip-clean --out Xml -p tsukuyomi-session --all-features && bash report_coverage.sh
      displayName: 'Run tarpaulin'
      env:
        CODECOV_TOKEN: $(myCodecovToken)
