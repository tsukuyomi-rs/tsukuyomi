resources:
  containers:
    - container: toolkit
      image: ubntintrepid/tsukuyomi:0.6
      options: --security-opt seccomp=unconfined
    - container: tarpaulin
      image: xd009642/tarpaulin:latest
      options: --security-opt seccomp=unconfined

jobs:
  - job: RegistryIndex
    pool:
      vmImage: 'ubuntu-16.04'
    container: toolkit
    variables:
      CARGO_HOME: $(Build.SourceDirectory)/.cargo
      CARGO_TERM_VERBOSE: true
    steps:
    - template: .ci/templates/steps/create-registry-index.yml

  - job: Windows
    dependsOn: RegistryIndex
    condition: succeeded()
    pool:
      vmImage: 'vs2017-win2016'
    variables:
      CARGO_TERM_VERBOSE: true
    strategy:
      matrix:
        stable:
          rust_toolchain: stable
    steps:
    - template: .ci/templates/steps/sync-registry-index.yml
    - template: .ci/templates/steps/install-rustup.yml
      parameters:
        name: Windows
    - script: bash .ci/run_test.sh
      displayName: 'run test script'

  - job: macOS
    dependsOn: RegistryIndex
    condition: succeeded()
    pool:
      vmImage: 'macOS-10.13'
    variables:
      CARGO_TERM_VERBOSE: true
    strategy:
      matrix:
        stable:
          rust_toolchain: stable
    steps:
    - template: .ci/templates/steps/sync-registry-index.yml
    - template: .ci/templates/steps/install-rustup.yml
      parameters:
        name: macOS
    - bash: .ci/run_test.sh
      displayName: 'run test script'

  - job: Linux
    dependsOn: RegistryIndex
    condition: succeeded()
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
      CARGO_TERM_VERBOSE: true
    strategy:
      matrix:
        stable:
          rust_toolchain: stable
        beta:
          rust_toolchain: beta
        nightly:
          rust_toolchain: nightly
        minimum_supported:
          rust_toolchain: 1.31.0
    steps:
    - template: .ci/templates/steps/sync-registry-index.yml
    - template: .ci/templates/steps/install-rustup.yml
      parameters:
        name: Linux
    - script: |
        rustup component add rustfmt-preview clippy-preview
      displayName: 'install supplemental components'
      condition: eq(variables['rust_toolchain'], 'stable')
    - bash: .ci/run_test.sh
      displayName: 'run test'
      condition: ne(variables['rust_toolchain'], 'nightly')
    - bash: .ci/run_test.sh
      displayName: 'run test (allow failure)'
      condition: eq(variables['rust_toolchain'], 'nightly')
      continueOnError: true
    - bash: .ci/build_doc.sh
      displayName: build API doc
    - bash: |
        set -e
        cd target/doc
        git init
        git remote add upstream "https://${GH_TOKEN}@github.com/tsukuyomi-rs/tsukuyomi.git"
        git config user.name 'Yusuke Sasaki'
        git config user.email 'yusuke.sasaki.nuem@gmail.com'
        git add -A .
        git commit -qm "Build API doc at $(git rev-parse --short HEAD)"
        git push -q upstream HEAD:refs/heads/gh-pages --force
      displayName: 'deploy API doc'
      condition: and(succeeded(), eq(variables['rust_toolchain'], 'stable'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      env:
        GH_TOKEN: $(myGitHubToken)

  # - job: tarpaulin
  #   dependsOn: RegistryIndex
  #   condition: succeeded()
  #   pool:
  #     vmImage: 'ubuntu-16.04'
  #   variables:
  #     CARGO_TERM_VERBOSE: true
  #   container: tarpaulin
  #   steps:
  #   - template: .ci/templates/steps/sync-registry-index.yml
  #   - script: |
  #       cargo --version
  #       rustc --version
  #       cargo tarpaulin --version
  #     displayName: show tool versions
  #   - script: bash .ci/run_coverage_test.sh
  #     displayName: 'run coverage test'
  #     env:
  #       CODECOV_TOKEN: $(myCodecovToken)
